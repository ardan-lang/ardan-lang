console.log("=== Functions & Closures ===");

// factorial (direct recursion)
function fact(n) {
    if (n <= 1) return 1;
    else return n * fact(n - 1);
}
console.log("fact 5 =", fact(5));

// closure with parameters
const sum = (a, b = 10) => a + b;
console.log("sum 4 =", sum(4, 10)); // JS supports default params

// join array of strings
const join = (args) => args.join("-");
console.log(join(["a", "b", "c"]));

// closure capturing outer variable
function outer(x) {
    const v = x * 2;
    function inner(y) {
        return v + y;
    }
    return inner;
}
const f = outer(5);
console.log("closure=", f(6)); // Should print 16

// higher-order function: call a function twice
function callTwice(fn, val) {
    fn(val);
    fn(val);
}
callTwice((x) => (console.log("Twice:", x)), 7);

// variable shadowing
let globalVar = 100;
function shadow(globalVar) {
    console.log("shadowed:", globalVar);
}
shadow(200);
console.log("original:", globalVar);

// indirect recursion (mutual recursion)
function indirectA(x) {
    if (x <= 1) return 1;
    else return x * indirectB(x - 1);
}
function indirectB(y) {
    return indirectA(y);
}
console.log("indirect recur:", indirectA(5));

console.log("=== Done Functions/Closures ===");
